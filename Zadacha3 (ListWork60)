//Дан односвязный линейный список и указатель на голову списка. Значения элементов списка упорядочены по возрастанию. Необходимо создать
//копию исходного списка, после чего во вновь созданном списке вставить в список значение M так, чтобы он остался упорядоченным
//и вывести ссылку на первый элемент полученного списка.

#include "pt4.h"
using namespace std;

void prohod(PNode p, int m) {
    if (p->Next == nullptr) {
        if (m < p->Data) {
            PNode insert = new TNode;
            insert->Data = m;
            insert->Next = p;
            if (p->Next == nullptr)
            {
                p->Next = insert;
                p = insert;
            }
            else
            {
                p->Next = p;
                p = insert;
            }
        }
        else  {
            PNode insert = new TNode;
            insert->Data = m;
            insert->Next = p->Next;
            if (p->Next == nullptr)
            {
                p->Next = insert;
                p = insert;
            }
            else
            {
                p->Next = insert;
                p = insert->Next;
            }
        }
    }
    while (p->Next != nullptr) {
        p = p->Next;
        if (m < p->Data) {
            PNode insert = new TNode;
            insert->Data = m;
            insert->Next = p;
            if (p->Next == nullptr)
            {
                p->Next = insert;
                p = insert;
            }
            else
            {
                p->Next = p;
                p = insert;
            }
        }
        else if (p->Next == nullptr) {
            PNode insert = new TNode;
            insert->Data = m;
            insert->Next = p->Next;
            if (p->Next == nullptr)
            {
                p->Next = insert;
                p = insert;
            }
            else
            {
                p->Next = insert;
                p = insert->Next;
            }
        }
    }
}

void Solve()
{
    Task("ListWork60");
    int i = 1, m;
    PNode ptr;
    pt >> m >> ptr;
    PNode copy = ptr;
    prohod(copy, m);
    pt << copy;
}
